
#last edit 22.06.2020
# what has chnaged ? : allignment with a different gtf file 
# name of file : genecount_NeuOlig_22_06_2020.txt
#set directory
#setwd("/group/ag_nowick/ANNA/NeuOlig/DESeq2")
setwd("C:/Users/AN/Desktop/master thesis literature/NeuOlig2")

#### DE expression analysis ofNeuOLig2 data:
# Neurons and Olig2
#controls

##load librarie
library(DESeq2)
library(tidyverse)
library(pheatmap)
library(ggrepel)
library(RColorBrewer)
library(ggplot2)
library(DEGreport)  # not available for R version 3.6.1

##Import & pre-process ----------------------------------------------------

# Import data from featureCounts
countdata <- read.table("genecounts_NeuOlig_22_6_20.txt", header=TRUE, row.names=1)
#import lnc_tf list
lnc_tf <-read.csv("lnc_TF_cataloge_ready_to_use.csv",header=TRUE)
# keep only the tf and lnc genes!!! i did it later in the script when i want to vizualize DE
test <-subset(countdata,row.names(countdata) %in%lnc_tf$gene.symbol)

# Remove first five columns (chr, start, end, strand, length)
countdata <-countdata[ ,6:ncol(countdata)]

# Remove .bam or .sam from filenames and the firstpart "..mapping"
colnames(countdata) <- gsub("\\.sorted.bam$", "", colnames(countdata))
colnames(countdata) <- gsub("...filtered_bam_files.", "", colnames(countdata))
colnames(countdata) <- gsub("_Control_", "_", colnames(countdata))

# remove a schizo sample 
countdata$AN09634_Schizo_NeuN <- NULL

###---------------------------------------------########
# Convert to matrix  
#SOS i WILL DO THIS later when I will need the data as matrix
countdata <- as.matrix(countdata)
head(countdata)

### make another dataset to see the expression of specific genes
c <- countdata
d <- cbind(rownames(c), data.frame(c, row.names=NULL))
colnames(d)[1]<-"gene"
grep("^ZNF542", d$gene) ## find the index 
geneOfInterest <-d[56441,] ## see the index !!!
write.csv(geneOfInterest,"ZNF542expession.csv")

## same with normalized counts
c <- normalized_counts
d <- cbind(rownames(c), data.frame(c, row.names=NULL))
colnames(d)[1]<-"gene"
grep("^ZNF542", d$gene) ## find the index 
geneOfInterest <-d[53719,] ## see the index !!!
write.csv(geneOfInterest,"ZNF542expession.csv")
##----------------------------------------------#######

# converst back to data.frame for ggplot
countdata_frame <- as.data.frame(countdata)
head(countdata_frame)

# Assign condition ,2 different condistions 1st Neu and 2nd Olig2
colfactor=factor(colnames(countdata))
levels(colfactor)[colfactor[c(1,3,5,7,9,11,13,15,17,19,20,22,23,25,27,29,31,33,34,36,38,40,42,44,45,47,49)]]<- "NeuN"
levels(colfactor)[colfactor[c(2,4,6,8,10,12,14,16,18,21,24,26,28,30,32,35,37,39,41,43,46,48,50)]]<- "Olig2"
condition <- factor(colfactor)

# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(countdata), condition))  #meta

# add another factor sex from additional info table 1 
coldata$sex <- c("M","M","F","F","F","F","M","M","M","M","M","M","M","M","F","F","M","M","F","F","F","F","F","F","M","M","M","M","M", "M","M","M","M","M","F","F","M","M","M","M","F","F","M","M","M","M","M","M","M","M")
coldata$age <-c("40","40","65","65","80","80","36","36","31","31", "20", "20", "32", "32", "68","68","41","41", "55", "53", "53", "45","49","49","80","80","76","76","75","75","66","66","64","49","75","75","66","66","52","52","36","36","57","57","43","43","25","25","55","55")
# check classes of the data 
class(countdata)

## convert data to matrix for downstream analysis
countdataM <- as.matrix(countdata)
head(countdataM)

# keep in mind: before any testing for differential expressionwe have to consider and normalize for any kind of variation in our sample

## The goal for DE analysis is to determine, for each gene , whether the diffrences in expression (counts) between groups is significant given the amount of variation observed within groups (replicates)

## RNA COUNT DISTRIBUTION--------------------------------------

# TO determine the appropriate statistical model, we need information about the distribution of counts

# plot a single sample
ggplot(countdata)+  # I am using data because is a data frame
  geom_histogram(aes(x=AN03398_Olig2),stat = "bin",bins=200 ,na.rm=TRUE)+
  xlab("Raw expression counts")+
  ylab("number of genes")

# make a zoom close to 0
ggplot(countdata)+
  geom_histogram(aes(x=AN03398_Olig2),stat="bin", bins=200,na.rm=TRUE)+
  xlim(-5,500) +
  xlab("Raw expression counts")+
  ylab("number of genes")



## NOTE the model that fits best, given the type of variability between replicates , is the Negative Bionomial (NB) model.
# The NB model is a good approximation for data where the mean < variance , as is the case with RNA-seq count data

# plot mean vs. variance ( to be sure that we use the right model
# run for NeuN do it for Olig2 as well
mean_counts <- apply(countdata[, c(1,3,5,7,9,11,13,15,17,19,20,22,23,25,27,29,31,33,34,36,38,40,42,44,45,47,49)], 1, mean)
variance_counts <- apply(countdata[, c(1,3,5,7,9,11,13,15,17,19,20,22,23,25,27,29,31,33,34,36,38,40,42,44,45,47,49)], 1, var)
df <- data.frame(mean_counts,variance_counts)

ggplot(df)+
  geom_point(aes(x=mean_counts, y=variance_counts))+
  geom_line(aes(x=mean_counts, y=mean_counts, color="red"))+
  scale_y_log10()+
  scale_x_log10()+
  ggtitle("NeuN")

##### DESeq normalized counts---------------------------

# sequencing depth and RNA composition need to be taken into account
# DESeq2 uses the median of rations method to normalize for both aspects

# write here why we filtering and the erroe with the estimating size factor function ( reason : zeros in each gene)
dds <- DESeqDataSetFromMatrix(countData=countdataM, colData=coldata, design=~condition)
#filter <- rowSums(countdata <= 10) <=2
dds <- dds[ rowSums(counts(dds)) > 50, ]

dds <- dds[filter,]
dds <- estimateSizeFactors(dds, type=c("itarate"))
dds <- estimateSizeFactors(dds)

# another way, cut  the SAMPLES with only zeros !! it worked , check with Vladi if it's the right approche 
table(colSums(counts(dds)==0))
idx <- which.max(colSums(counts(dds) == 0))
dds2 <- dds[ , -idx]

dds<-estimateSizeFactors(dds2)

##Check the size factors
sizeFactors(dds)

#retrive the normalized counts matrix from dds
normalized_counts <- counts(dds, normalized=TRUE)
#keep only the normalized counts for lnc and TFs
test_2<-subset(normalized_counts,row.names(normalized_counts) %in%lnc_tf$gene.symbol)

# save normalized counts 
write.table(normalized_counts, file="C:/Users/AN/Desktop/master thesis literature/NeuOlig2/normalized_counts_NeuOlig_2Filt.txt", sep="\t", quote=F, col.names=NA)


# take a look of the reads for each sample
colSums(counts(dds))


### Quality Control -sample level

# Transform counts for data visulaiztion -rlog transformation
# blind=TRUE should be used for comparing samples in an manner unbiased
#by prior information on samples, for example to perform sample QA (quality assurance).
#rld <-rlog(dds,blind=TRUE)
rld <-vst(dds,blind=TRUE) #FASTER

## PCA plot
#By default the function uses the top 500 most variable genes. You can change this by adding the ntop argument 
#and specifying how many genes you want to use to draw the plot.
plotPCA(rld, intgroup="condition")
plotPCA(rld, intgroup="sex")

## explore other PCs

# Input is a matrix of log transformed values
#rld <- rlog(dds, blind=T)
rld_mat <- assay(rld)
pca <-prcomp(t(rld_mat))
# Create data frame with metadata and PC3 and PC4 values for input to ggplot
df <- cbind(coldata, pca$x)
ggplot(df) + geom_point(aes(x=PC1, y=PC2, color = condition))
ggplot(df) + geom_point(aes(x=PC1, y=PC2, color = sex))

# with sample labels
p<- ggplot(df,aes(x=PC1, y=PC2,color = condition,label=row.names(df)))
p<- p+ geom_point() + geom_text(size=3)
p
#save
pdf(  "pca_condition.pdf",width = 10,height = 10)
library(gridExtra)
yy <- grid.arrange(p,nrow=1)
op <- par(no.readonly=TRUE)
par(op)
dev.off()
#with percentage
row.names(df) <- paste(df$Samples, row.names(df), sep="_") 
df$Species <- NULL
head(df)

percentage <- round(pca$sdev / sum(pca$sdev) * 100, 2)
percentage <- paste( colnames(df[4:50]), "(", paste( as.character(percentage), "%", ")", sep="") )

p<-ggplot(df,aes(x=PC1,y=PC2,color=sex ))
p<-p+geom_point() + xlab(percentage[1]) + ylab(percentage[2])
p

#### plot features condtibute to the classification
df_out_r <- as.data.frame(pca$rotation)
df_out_r$feature <- row.names(df_out_r)
df_out_r

p<-ggplot(df_out_r,aes(x=PC1,y=PC2,label=feature,color=feature ))
p<-p+geom_point() + geom_text(size=3)
p


###Hierarchical clustering 

### Extract the rlog matrix from the object
rld_mat <- assay(rld) 

### Compute pairwise correlation values
rld_cor <- cor(rld_mat)    ## cor() is a base R function
head(rld_cor)   ## check the output of cor(), make note of the rownames and colnames

### Plot heatmap
pheatmap(rld_cor)

# check how to improve the graph 

### DE analysis---------------------------------------------------------------------

## Run analysis
dds <- DESeq(dds)
## results (take a look of the p-value 0.01 and in the results from the contrast is 0.05)
res <- results(dds,lfcThreshold = log2(1.5))
summary(res)

## plot dispresion estimates 
plotDispEsts(dds)+
  theme(legend.position = "bottom")


#Each black dot is a gene with am associated mean expression 
# black dotscircled in blue are detected as dispresion outliers and not shrunk toward the priooe 


## generate shrunken log2 fold change estimates  because I have a new version of the package
# and its not by default calculated 

### TEST the null hypothesis = No diffrential expression between 2 groups

#set contrasts
# NOTE: the order of the names determines the direction of fold change that is reported
# so in this case we compara the NeuN with Olig2 ,if we observe a log2 change of -2 means the gene expression is lover in NeuN relative to the Olig2
contrast_Neu_Olig2 <-c("condition","NeuN","Olig2") # this contrast


# check "type" in the lgcShrink
res_tableOE_unshrunken <-results(dds, contrast=contrast_Neu_Olig2,alpha=0.05)
res_tableOE <-lfcShrink(dds, contrast=contrast_Neu_Olig2, type="ashr",res=res_tableOE_unshrunken)



#the order of the names determine the direction of the fold change
#The name provided in the second element is the level that is used as baseline
#)

## explore data with MA PLOT
# mean of normalized counts vs. log2 fold change
# The genes taht are significantly DE are colored to be easily identified 

plotMA(res_tableOE,ylim=c(-2,2))
plotMA(res_tableOE_unshrunken,ylim=c(-2,2))


#### SOS MA plots does not consider statistical measures 


#### RESULTS exploration ------------------------ eveythings is for a specific contrast now

class(res_tableOE)
mcols(res_tableOE,use.names=T)

# take a look of the results of the specific contrast 1dpi vs. 4dpi
res_tableOE %>% data.frame() %>% View()

## Summarize results
#FDR <0.05
summary(res_tableOE)

##extracting significant differentially expressed genes  

#set thresholds 
padj.cutoff <- 0.05
lfc.cutoff <- 0.58  #we are working with log2FC so that means an actual fold change 1.5

##subset the results table with only the significant genes

#convert the results table into a tribble
install.packages("tribble")    # not available for r 3.3.3 and R 3.6.1 try it in laptop not conda
library(tribble) # 

res_tableOE_significant <-res_tableOE %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>%
  as_tibble()
# extract the significant ones
sig_genes <- res_tableOE_significant %>%   #sigOE
  filter(padj<padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sig_genes

###----------------- Visualizing results---------------------------

#metadata =coldata
#normalized expression data for each gene = normalized_counts
#tibble versions of the DESeq2 results : res_tableOE_significant

#create tibble objects for the normalized and coldata as well

#Create tibbles including row names
NeuOlig_meta <- coldata %>%
  rownames_to_column(var="samplename") %>% 
  as_tibble()


## convert normlaized_counts to dataframe (its matrix)
tlll<- as.data.frame(normalized_counts, row.names = NULL, optional = FALSE,
                     make.names = TRUE,
                     stringsAsFactors = default.stringsAsFactors())
# translate it to tibble
ttt<- tlll %>%
  rownames_to_column(var="gene") %>%
  as_tibble()
## this is not working
normalized_countstibble <- normalized_counts %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>%
  as_tibble()

## ploting significant genes------------------
# pick a gene TAL1 Transcription factor log2foldcahnge -3.7296016
plotCounts(dds,gene="ZNF542P",intergroup="condition")
#pick a lnc IRAIN
plotCounts(dds,gene="IRAIN",intergroup="condition")

# save the plotCounts to a data frame object
d <- plotCounts(dds,gene="ZNF542P", intergroup="condition", returnData=TRUE)
c <- plotCounts(dds,gene="IRAIN", intergroup="condition", returnData=TRUE)
#Ploting the CCNL2 normalized counts using the samplenames (rownames of the as labels)
ggplot(d, aes(x = condition, y = count, color = condition)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0)) +
  #geom_text_repel(aes(label = rownames(d))) + 
  theme_bw() +
  ggtitle("ZNF542P") +
  theme(plot.title = element_text(hjust = 0.5))

#plot multiple genes

top20_sig_genes <- res_tableOE_significant %>%
  arrange(padj) %>%  #arrange rows by padj values
  pull(gene) %>%  #extract character vector of ordered genes
  head(n=20) #extract the fisrst 20 genes

# extract the normalized counts for these genes
top20_sig_norm <- normalized_counts %>%
  filter(gene %in% top20_sig_genes)

# gathering the columns to have the normalized counts to a single column
gathered_top20_sig <-top20_sig_norm %>%
  gather(colnames(top20_sig_norm)[2:51], key="samplename",value="normalized_counts")

# check the column heades in the gathered data frame
View(gathered_top20_sig)
gathered_top20_sig <- inner_join(NeuOlig_meta, gathered_top20_sig)  

## plot using ggplot2
ggplot(gathered_top20_sig) +
  geom_point(aes(x = gene, y = normalized_counts, color = condition)) +
  scale_y_log10() +
  xlab("Genes") +
  ylab("log10 Normalized Counts") +
  ggtitle("Top 20 Significant DE Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(hjust = 0.5))    


###### from now on ...problem
## heatmap
#In addition to plotting subsets, we could also extract the normalized values of all the significant genes 
#and plot a heatmap of their expression using pheatmap().  
norm_sig <- ttt[,c(1,2:51)] %>%
  filter(gene %in% sig_genes$gene)  #sigOE

norm_sig <-column_to_rownames(norm_sig,var="gene")

#1,2,4,6,8,10,12,14,16,18,20,21,23,24,26,28,30,32,34,35,37,39,41,43,45,46,48,50
### Annotate our heatmap (optional)
annotation <- NeuOlig_meta %>% 
  select(samplename, condition) %>% 
  data.frame(row.names = "samplename")

### Set a color palette
heat_colors <- brewer.pal(6, "YlOrRd")

#remove NAs
d <- norm_sig[apply(norm_sig, MARGIN = 1, FUN = function(x) sd(x) != 0),]
### Run pheatmap
pheatmap(d, 
         color = heat_colors, 
         cluster_rows = T,
         cluster_cols=T,
         show_rownames = F,
         annotation = annotation, 
         border_color = NA, 
         fontsize = 8, 
         scale = "row", 
         fontsize_row = 8, 
         height = 20)
# extract the diagram of gene clustering
library(dendextend)

my_hclust_gene <- hclust(dist(norm_sig), method = "complete")
as.dendrogram(my_hclust_gene) %>%
  plot(horiz = TRUE)


### another way for heatmap from vignette its working

library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
                decreasing=TRUE)[1:20]
select <-order(rowMeans(top20_sig_norm),
               decreasing=TRUE)[1:20]

df3 <- coldata[,1:2]
df3$sex <-NULL
pheatmap(assay(rld)[top20_sig_norm,], cluster_rows=FALSE, show_rownames=FALSE,
         cluster_cols=FALSE, annotation_col=df3) # problem because row names of df mast match the row names of my original dataframe

###another way without the need to create a df DONT RUN
cdata <- colData(dds)

pheatmap(assay(rld),
         cluster_rows = FALSE,
         show_rownames = FALSE,
         cluster_cols = FALSE,
         annotation_col = as.data.frame(cdata[,"condition"], row.names=rownames(cdata)))

#scaling the rows 
cal_z_score <-function(x) {(x-mean(x))/sd(x)}
data_subset_norm <-t(apply(norm_sig,1,cal_z_score))
pheatmap(data_subset_norm)

#create annotations
my_hclust_gene <- hclust(dist(norm_sig),method="complete")

#install if necessary
install.packages("dendextend")

#load package

library(dendextend)

as.dendrogram(my_hclust_gene) %>%
  plot(horz=TRUE)

### Gene clustering
install.packages("genefilter")
BiocManager::install("genefilter")
topVarGenes <- head(order(rowVars(assay(rld)),decreasing = TRUE),35)
heatmap.2(assay(rld)[topVarGenes,], scale="row",
          trace="none",dendrogram="column"
          #col=heat.colors()
)

## try again
#1. extract all the differentially expressed genes 
# 2.plot heatmap with row scaling 

#


## volcano plot 

res_tableOE_significant <-res_tableOE_significant %>%
  mutate(threshold_sig=padj <0.5 & abs(log2FoldChange) >= 0.58)
# Volcano plot 
ggplot(res_tableOE_significant)+
  geom_point(aes(x=log2FoldChange, y=-log10(padj),colour=threshold_sig))+
  ggtitle("1dpi vs. 4dpi") +
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value")+
  theme(legend.position = "none",
        plot.title = element_text(size=rel(1.5), hjust=0.5),
        axis.title = element_text(size=rel(1.25)))
dev.off()

#create a column to indicate which genes to label

res_tableOE_significant <-res_tableOE_significant %>% 
  arrange(padj)%>%
  mutate(genelabels="")

res_tableOE_significant$genelabels[1:10] <- res_tableOE_significant$gene[1:10]

View(res_tableOE_significant)

ggplot(res_tableOE_significant,aes(x=log2FoldChange,y= -log10(padj))) +
  geom_point(aes(colour=threshold_sig)) +
  geom_text_repel(aes(label=genelabels)) +
  ggtitle("expression") +
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value") +
  theme(legend.position = "none",
        plot.title=element_text(size=rel(1.5),hjust=0.05),
        axis.title=element_text(size=rel(1.25))) # 

# try with the tool of DESeq2 package 
BiocManager::install("DEGreport")

DEGreport::degPlotWide(countdata,row.names(countdata)[1:10], group="condition")


DEGreport::degPlot(dds=dds,res=rld_mat,n=20,xs="type",group="condition")
DEGreport::degVolcano(
  data.frame(res[,c("log2FoldChange","padj")]),
  plot_text = data.frame(res[1:10,c("log2FoldChange","padj","id")]))
